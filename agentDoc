#!/bin/bash -


function help() {
    cat <<USAGE
# AGENTDOC 1                 2020-06-23                  1.6

## NAME

agentDoc - An agent which makes documents easy to be accessed, modified and searched.

## SYNOPSIS

agentDoc [.=]  
agentDoc [*PATTERN*]  
agentDoc [+-] [*DOCNAME*]  
agentDoc [*SOURCE* | *DOCNAME*] [*DESTINATION* | *DOCNAME*]

## COMMANDS

    $ad
        review the most unread doc
    $ad .
        list all docs
    $ad + docname
        create a doc to edit
    $ad - docname
        delete a doc
    $ad pattern
        search a doc to edit
    $ad URL/filepath1/docname1 filepath2/docname2
        append a page/file/doc to an internal doc or an external file
    $ad URL/filepath1/docname1 dirpath
        export a page/file/doc to a directory
    $ad = [comment]
        sync with git
    $ad -h
        help

### About Default Doc

agentDoc guesses the filename if not provided.

When the managed folder is synced with Github Wiki, the default filename is 'home'.  
When the managed folder is a git repository, the default filename is 'readme'.

### About Review

When \`$ad\` is called without any arguments, it searches through the managed directory for the most unread document and open it.

With this feature you may recurrently review your documents and 

* remember everything in your knowledge base
* keep your notes neat and useful

The score to evaluate how 'unread' a document is = ((now - last_access_time) / (1 + last_access_time - last_change_time) - 1) * doc_size

If all the scores are less than 0, another score0 = (now - last_access_time) / (1 + last_access_time - last_change_time) is used.

### About Search

When searching, \`$ad\` looks at the filenames and contents to pick the only file with its name or content exactly or partially matching the pattern, then opens it for editing.

In every search phase if the result contains multiple files, \`$ad\` prints them and quit immediately.

## INSTALLATION

\`curl "https://raw.githubusercontent.com/cf020031308/agentDoc/master/agentDoc" -o /usr/local/bin/agentDoc\`  
\`chmod 755 /usr/local/bin/agentDoc\`

Put or link agentDoc as a copy into the folder where you hope to manage documents. Then name the copy as the extension of the managed documents, such as \`md\` or \`txt\`. It can also be hidden by being named as \`.md\`, \`.txt\`, etc.

And It's recommended to link the copy into \`\$path\` such as \`/usr/local/bin/$ad\` to make it convenient to use.

### Installation Examples

\`ln -sf agentDoc /Documents/cheatsheet/.md\`  
\`ln -sf /Document/cheatsheet/md /usr/local/bin/cheat\`  
  Manage cheatsheet in markdown format with command \`cheat\`

\`cp agentDoc /Documents/myproject.wiki.git/md\`  
\`ln -sf /Document/myproject.wiki.git/md /usr/local/bin/wk\`  
  Manage documents of github wiki in markdown format with command \`wk\`

\`ln -sf agentDoc ~/.vim/snippets/snippets\`  
\`ln -sf ~/.vim/snippets/snippets /usr/local/bin/snippets\`  
  Manage vim-snippets with command \`snippets\`

### Usecases

With different extensions and aliases agentDoc becomes:

1. Shortcut
2. Todo app
3. Cheatsheet
4. Snippet manager
5. Wiki, blog, diary, ...
6. ...

## SPECIALITIES

\`$ad\` leverages the power of Github <https://github.com> and markdown <https://guides.github.com/features/mastering-markdown/>.

1. Properly fix referenced URLs when getting a remote markdown file
2. Automatically manage images referenced in a local markdown file
    1. When editing, you can reference an image relative to your working directory (PWD);
    2. When appending, images referenced in the source file will be copied to the destination folder, and links converted as well.
    3. When syncing, images in the managed folder which are not referenced will be removed before pushing.
3. Friendly with Github
    1. URLs of raw. When getting a remote file from Github or Github Wiki, \`$ad\` guesses the URL of the raw file according to the given URL.
    2. Issue links. When getting a remote file from Github, GFM Issue links will be converted to normal links.

## EXIT STATUS

The \`$ad\` utility exits 0 on success, and >0 if an error occurs.

## SEE ALSO

git(1), curl(1)

## AUTHOR

Written first in May, 2018 by Roy <https://github.com/cf020031308/agentDoc>  
Distributed under the terms of the BSD license.
USAGE
}


defaultfn=""
ad="$(basename $0)"
fp="$0"
if [ -L "$fp" ]; then
    fp="$(readlink $fp)"
fi
ext="$(basename $fp)"
ext="${ext#.}"
base="$(cd $(dirname $fp); pwd)"


function _ismd() {
    test "$ext" = "md" -o "$ext" = "markdown"
}


function _get_repo() {
    _pwd="$PWD"
    cd "$1"
    git remote get-url --push origin 2>&- | sed q | grep -o "\w*/.*"
    cd "$_pwd"
}


if [ ! -n "$defaultfn" ]; then
    repo=$(_get_repo "$base")
    if [ -n "$repo" ]; then
        if [ "${repo:(-9)}" = ".wiki.git" ]; then
            defaultfn="home"
        else
            defaultfn="readme"
        fi
    fi
fi


function _mdimg_redir() {
    # Migrate images of markdown file from one directory to another and convert its links
    # Usage: _mdimg_redir src_file dst_file [src_dir]
    dstdir=$(dirname $2)
    srcdir=${3:-$(dirname $1)}
    rpl=()
    i=0
    ifs="$IFS"
    IFS="${IFS:(-1)}"
    for mt in $(grep -on '!\[[^]]*\]([^)]\+)' "$1" | grep -v '(https\{0,1\}://'); do
        lineno=${mt%%:*}
        imgpath=$(expr "$mt" : "[0-9]\{1,\}:!\[[^]]*\](\([^)]\{0,\}\))")
        if [ "${imgpath:0:1}" != "/" ]; then
            realimgpath="$srcdir/$imgpath"
        else
            realimgpath="$imgpath"
        fi
        if [ -e "$realimgpath" ]; then
            imgname="$(basename $imgpath)"
            if [ "$imgpath" != "$imgname" ]; then
                rpl[i++]="-e ${lineno}s ]($imgpath) ]($imgname) "
            fi
            if [ ! "$realimgpath" -ef "$dstdir/$imgname" ]; then
                cp "$realimgpath" "$dstdir/$imgname"
            fi
        fi
    done
    IFS="$ifs"
    if [ ! "$1" -ef "$2" ]; then
        test $i -eq 0 && cat "$1" >> "$2" || sed "${rpl[@]}" "$1" >> "$2"
    elif [ $i -gt 0 ]; then
        sed -i "" "${rpl[@]}" "$1"
    fi
}


function edit() {
    fn="${@:$#}"
    if [ -e "$fn" ]; then
        if [ "$EDITOR" = "vi" -o "$EDITOR" = "vim" -o "$EDITOR" = "" ]; then
            vim $@
        else
            $EDITOR "$fn"
        fi
        _ismd && _mdimg_redir "$fn" "$fn" "$PWD"
        exit 0
    fi
}


function append() {
    srcfn=$(basename $1)
    srcfn=${srcfn%.$ext}
    if [ -d "$2" ]; then
        dst="${2}/${srcfn}.$ext"
    elif [ -f "$2" ]; then
        dst="$2"
    elif [ "${2/\//}" = "$2" ]; then
        dst="$base/${2%.$ext}.$ext"
    else
        if [ "${2:(-1)}" != "/" ]; then
            dst="${2%.$ext}.$ext"
        elif [ "${2/\//}" != "${2//\//}" ]; then
            dst="${2}${defaultfn:-$srcfn}.$ext"
        else
            dst="$base/$2${defaultfn:-$srcfn}.$ext"
        fi
        mkdir -p "$(dirname $dst)"
    fi

    host=$(expr "$1" : "\(https\{0,1\}://[^/]*\)/")
    if [ -n "$host" ]; then
        src="$1"
        url="$src"
        rpl=()
        i=0
        if _ismd; then
            dir="$(dirname $src)/"
            if [ "$host" = "https://github.com" ]; then
                # Guess markdown file's real URL if it's not given directly
                case "$src" in
                    */blob/*)
                        url="${src/\/blob\///raw/}";;
                    */tree/*)
                        url="${src/\/tree\///raw/}/${defaultfn:-readme}.$ext";;
                    */wiki/*)
                        url="${src#https://github.com/}"
                        url="https://raw.githubusercontent.com/wiki/${url/\/wiki\///}.$ext";;
                    */wiki)
                        url="${src#https://github.com/}"
                        url="https://raw.githubusercontent.com/wiki/${url%*/wiki}/Home.$ext";;
                    *)
                        url="$src/raw/master/${defaultfn:-readme}.$ext"
                esac
                # Convert issues/commits/links for Github: https://guides.github.com/features/mastering-markdown/
                rpl[i++]="-e s (^|[^([])[[:<:]]([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+)#([0-9]+)[[:>:]] \1[\2#\3](https://github.com/\2/issues/\3) g"
                rpl[i++]="-e s (^|[^([])[[:<:]]([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+)@([a-z0-9]{7})([a-z0-9]{0,33})[[:>:]] \1[\2@\3](https://github.com/\2/commit/\3\4) g"
                rpl[i++]="-e s (^|[^([])(https?://[^[:space:]]*) \1[\2](\2) g"
            fi
            # Convert links from relative to absolute
            # FIXME: keep in-page anchor as it is
            rpl[i++]="-e s \]\(((https?://[^)]+)|(/[^)]+)|(#[^)]+)|([^)]+))\) ](\2))$host\3))$src\4))$dir\5) g"
            rpl[i++]="-e s ))$src\) ) g"
            rpl[i++]="-e s ))$dir\) ) g"
            rpl[i++]="-e s ))$host\) ) g"
            rpl[i++]="-e s ]\(\)\) ]( g"
            rpl[i++]="-e s ]\(\) ]($src) g"
        fi
        curl -L "$url" | sed -E "${rpl[@]}" >> "$dst"
    else
        if [ -f "$1" ]; then
            src="$1"
        elif [ -f "$base/${1%.$ext}.$ext" ]; then
            src="$base/${1%.$ext}.$ext"
        elif _ismd && [ -f "$base/$1/${defaultfn:-$1}.$ext" ]; then
            src="$base/$1/${defaultfn:-$1}.$ext"
        else
            echo "$1 not found."
            exit 1
        fi
        if _ismd; then
            _mdimg_redir "$src" "$dst"
        else
            cat "$src" >> "$dst"
        fi
    fi
}


function edit_default() {
    fn="$base/${defaultfn:-$ad}.$ext"
    if [ ! -e "$fn" ]; then
        help > "$fn"
    fi
    edit "$fn"
}

function review() {
    now=$(date +%s)
    fn=$(find "$base" -type f -iname "*.$ext" -exec stat -f "$now %a %m %z %N" {} \; | awk '
    BEGIN {
        max0 = 0; name0 = "";
        max = 0; name = "";
    }
    {
        score0 = ($1 - $2) / (1 + $2 - $3)
        if (score0 > max0) { max0 = score0; name0 = $5; }
        score = (score0 - 1) * $4;
        if (score > max) { max = score; name = $5; }
    }
    END {
        print(name ? name : name0);
    }')
    edit "$fn"
}


function list_docs() {
    cd "$base" && (ls *.$ext || find . -type f -name "*.$ext") && git status . 2>&-
}


function git_sync() {
    # Remove all unreferenced assets
    _ismd && for asset in $(find "$base" -maxdepth 2 -type f \! -path "$base/.*" \! -name "*.$ext"); do
        grep -RF "]($(basename $asset))" "$base" > /dev/null || rm "$asset"
    done
    cd "$base"
    git pull || exit 1
    git add . && git commit -m "${1:-Commit by cf020031308/agentDoc}" && git push
}


function search_to_edit() {
    function _quit_if_ambiguous {
        if [ $(echo "$@" | wc -l) -gt 1 ]; then
            echo "$@" | sed "s $base/  ;s \.$ext  " | sort | uniq -c
            exit 1
        fi
    }

    # 1. If it exactly matches the file name, edit the file.
    edit "$base/$1.$ext"
    _ismd && edit "$base/$1/${defaultfn:-$1}.$ext"

    # 2. Elseif it matches one file name by ignoring the lettercase, edit the only file.
    found=$(find $base -d 1 -type f -iname "$1.$ext"; _ismd && find $base -d 2 -type f -ipath "*/$1/${defaultfn:-$1}.$ext")
    _quit_if_ambiguous "$found"
    edit "$found"

    # 3. Elseif it partially matches one file name by ignoring the lettercase, edit the only file.
    found=$(find $base -d 1 -type f -iname "*$1*.$ext"; _ismd && find $base -d 2 -type f -ipath "*$1*.$ext")
    _quit_if_ambiguous "$found"
    edit "$found"

    # 4. Elseif it matches one file content by ignoring the lettercase, edit the only file.
    found=$(_ismd; find $base -maxdepth $(($??1:2)) -type f -iname "*.$ext" -exec grep -HFi "$1" {} \;)
    _quit_if_ambiguous "$found"
    edit "+/$1\c" "${found%%:*}"

    # 5. Else, abort.
    echo "No match found."
    exit 1
}


function create() {
    if _ismd && [ "${1:(-1)}" = "/" ]; then
        mkdir -p "$base/$1"
        fn="$base/${1}${defaultfn:-${1:0:${#1}-1}}.$ext"
    else
        fn="$base/$1.$ext"
    fi
    touch "$fn"
    edit "$fn"
}


function remove() {
    if _ismd && [ "${1:(-1)}" = "/" -o -e "$base/$1/${defaultfn:-$1}.$ext" ]; then
        rm -r "$base/$1"
    else
        rm "$base/$1.$ext"
    fi
}


case $# in
    0) review;;
    1)
        case $1 in
            -h) help;;
            .) list_docs;;
            =) git_sync;;
            *) search_to_edit $1;;
        esac;;
    2)
        case $1 in 
            +) create "$2";;
            -) remove "$2";;
            =) git_sync "$2";;
            *) append "$1" "$2";;
        esac;;
    *) help; exit 1;;
esac

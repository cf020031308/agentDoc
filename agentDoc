#!/bin/sh -


function help() {
    cat <<USAGE
# AGENTDOC 1                 2018-06-22                  1.4

## NAME

agentDoc - Document manager majored in cheatsheet and github wiki

## SYNOPSIS

agentDoc [.=]  
agentDoc [*PATTERN*]  
agentDoc [+-] [*DOCNAME*]  
agentDoc [*SOURCE* | *DOCNAME*] [*DESTINATION* | *DOCNAME*]

## EXAMPLES

\`ln -sf agentDoc /Documents/cheatsheet/.md\`  
\`ln -sf /Document/cheatsheet/md /usr/local/bin/cheat\`  
  Manage cheatsheet in markdown format with command \`cheat\`

\`cp agentDoc /Documents/myproject.wiki.git/md\`  
\`ln -sf /Document/myproject.wiki.git/md /usr/local/bin/wk\`  
  Manage documents of github wiki in markdown format with command \`wk\`

\`ln -sf agentDoc ~/.vim/snippets/snippets\`  
\`ln -sf ~/.vim/snippets/snippets /usr/local/bin/snippets\`  
  Manage vim-snippets with command \`snippets\`

## DESCRIPTION

Put or link agentDoc into the folder where to manage documents and name it to the suffix of the documents, such as md or txt.

You can also hide your agentDoc by naming it as a hidden file, such as .md or .txt. It's the same.

It's recommended to link it into \$path such as /usr/local/bin/$fn.

Then the following commands are available:

    edit the default doc    : $fn
    list all docs           : $fn .
    create a doc to edit    : $fn + docname
    delete a doc            : $fn - docname
    search a doc to edit    : $fn pattern
    append a web to a doc   : $fn URL docname
    append a file to a doc  : $fn path docname
    copy a doc to external  : $fn docname directory
    append a doc to another : $fn docname1 docname2
    sync with git           : $fn = [comment]
    help                    : $fn -h

### Usecases

With different suffices and commands agentDoc becomes:

1. Shortcut
2. Todo app
3. Cheatsheet
4. Snippet manager
5. Wiki, blog, diary, ...
6. ...

### Image migrating in markdown

When editing documents in markdown, paths of the pictures should be relevant to pwd, not to the managed folder.  
After editing, agentDoc will migrate pictures into the managed folders.

When migrating a doc to another directory out of the managed folder, agentDoc migrates related pictures to it, too.

## EXIT STATUS

The $fn utility exits 0 on success, and >0 if an error occurs.

## SEE ALSO

vim(1), git(1), curl(1)

## AUTHOR

Written in May, 2018 by Roy <https://github.com/cf020031308/agentDoc>  
Distributed under the terms of the BSD license.
USAGE
}


IMG="_img"
fn=$0
if [ -L $fn ]; then
    fn=$(readlink $fn)
fi
sfx="$(basename $fn)"
sfx="${sfx#.}"
dir=$(cd $(dirname $fn); pwd)
fn=$(basename $0)


function _md_img_dir() {
    if [ "$sfx" = "md" -o "$sfx" = "markdown" ]; then
        local="$dir/$IMG"
        if [ ! -d "$local" ]; then
            mkdir -p "$local"
        fi
        remote=$(sh -c "cd $dir; git remote -v 2>&- | grep 'github\.com.*\.wiki\.git (push)$' | head -n 1")
        remote=${remote%%.wiki.git*}
        remote=${remote##*github.com?}
        if [ -n "$remote" ]; then
            echo "https://raw.githubusercontent.com/wiki/$remote/$IMG"
        else
            echo "./$IMG"
        fi
    fi
}


function _md_ln_srcs() {
    grep -on '!\[[^]]*\]([^)]\+)' "$1" | sed 's :.*( / ;s/)$//'
}


function edit() {
    vim $@
    _fn=${@:$#}
    # migrate images
    if [ -e "$_fn" ]; then
        imgs=$(_md_img_dir)
        if [ -n "$imgs" ]; then
            rep=""
            for ln_src in $(_md_ln_srcs "$_fn")
            do if [ -e "${ln_src#*/}" ]; then
                cp "${ln_src#*/}" "$dir/$IMG/" 2>&- && rep="$rep -e ${ln_src/\//s|(})|($imgs/$(basename $ln_src))|g;"
            fi
            done
            if [ -n "$rep" ]; then
                sed -i '' $rep "$_fn"
            fi
        fi
    fi
    exit 0
}


function edit_default() {
    _fn="$dir/$fn.$sfx"
    if [ ! -e "$_fn" ]; then
        help > "$_fn"
    fi
    edit "$_fn"
}


function list_docs() {
    sh -c "cd $dir && ls *.$sfx && git status . 2>&-"
}


function git_sync() {
    _pwd=$PWD
    cd "$dir"
    git pull || exit 1
    # Shrink unreferenced images
    if [ -d "$dir/$IMG" ]; then
        for img in $(ls "$dir/$IMG" | xargs basename)
        do grep -RF "$img)" "$dir" > /dev/null || rm "$dir/$IMG/$img"
        done
        git add "$IMG"
    fi
    git add "*.$sfx" && git commit -m "${1:-Commit by cf020031308/agentDoc}" && git push
    cd $_pwd
}


function _quit_when_ambiguous {
    if [ $(echo "$@" | wc -l) -gt 1 ]; then
        echo "$@" | sed "s $dir/  "
        exit 1
    fi
}


function search_to_edit() {
    found="$dir/$1.$sfx"
    if [ -e "$found" ]; then
        edit "$found"
    fi
    found=$(find $dir -d 1 -type f -iname "$1.$sfx")
    _quit_when_ambiguous "$found"
    if [ -n "$found" ]; then
        edit "$found"
    fi
    found=$(find $dir -d 1 -type f -iname "*$1*.$sfx")
    _quit_when_ambiguous "$found"
    if [ -n "$found" ]; then
        edit "$found"
    fi
    found=$(find $dir -d 1 -type f -iname "*.$sfx" -exec grep -HFi "$1" {} \;)
    _quit_when_ambiguous "$found"
    if [ -n "$found" ]; then
        edit "+/$1\c" "${found%%:*}"
    fi
    exit 1
}


function migrate() {
    scheme=${1%%://*}
    src="$dir/$1.$sfx"
    dst="$dir/$2.$sfx"
    if [ "$scheme" = "http" -o "$scheme" = "https" ]; then
        curl "$1" >> "$dst"
    elif [ -e "$1" ]; then
        cat "$1" >> "$dst"
    elif [ ! -e "$src" ]; then
        echo "$1 not found."
        exit 1
    elif [ -d "$2" ]; then
        imgs=$(_md_img_dir)
        if [ -n "$imgs" ]; then
            local="$2/$IMG"
            if [ ! -d "$local" ]; then
                mkdir -p "$local"
            fi
            rep=""
            for ln_src in $(_md_ln_srcs "$src")
            do
                img="$dir/$IMG/"$(basename "$ln_src")
                if [ -e "$img" ]; then
                    cp "$img" "$local" && rep="$rep -e ${ln_src/\//s|(})|(./$IMG/$(basename $ln_src))|g;"
                fi
            done
            if [ -n "$rep" ]; then
                sed $rep "$src" >> "$2/$1.$sfx"
                exit 0
            fi
        fi
        cat "$src" >> "$2/$1.$sfx"
    else
        cat "$src" >> "$dst"
    fi
}


case $# in
    0) edit_default;;
    1)
        case $1 in
            -h) help;;
            .) list_docs;;
            =) git_sync;;
            *) search_to_edit $1;;
        esac;;
    2)
        case $1 in 
            +) edit "$dir/$2.$sfx";;
            -) rm "$dir/$2.$sfx";;
            =) git_sync "$2";;
            *) migrate "$1" "$2";;
        esac;;
    *) help; exit 1;;
esac
